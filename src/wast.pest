/// Values

// Integers
sign = @{ ("+" | "-")? }
digit = @{ '0' .. '9' }
hexdigit = @{
      digit
    | 'A' .. 'F'
    | 'a' .. 'f'
}
num = @{ digit ~ ("_"? ~ digit)* }
hexnum = @{ hexdigit ~ ("_"? ~ hexdigit)* }

unsigned_num = @{ num | "0x" ~ hexnum } // uN

signed_num = @{ sign ~ num | sign ~ "0x" ~ hexnum } // sN

uninterpreted_integer = { unsigned_num | signed_num } // iN

// Floating-Point
frac = @{ (digit ~ frac | digit ~ "_" ~ digit ~ frac)? }
hexfrac = @{ (hexdigit ~ hexfrac | hexdigit ~ "_" ~ hexdigit ~ hexfrac)? }
float = @{
      num ~ "." ~ frac
    | num ~ ("E" | "e") ~ sign ~ num
    | num ~ "." ~ frac ~ ("E" | "e") ~ sign ~ num
}
hexfloat = @{
      hexnum ~ "." ~ hexfrac
    | hexnum ~ ("E" | "e") ~ sign ~ num
    | hexnum ~ "." ~ hexfrac ~ ("E" | "e") ~ sign ~ num
}

floating_point_number = @{ sign ~ floating_point_number_mag } // fN
floating_point_number_mag = @{
      float
    | hexfloat
    | "inf"
    | "nan"
    | "nan:0x" ~ hexnum
} // fNmag

// Strings
string = @{ "\"" ~ stringelem* ~ "\"" }
stringelem = @{ stringchar | "\\" ~ hexdigit ~ hexdigit }
stringchar = @{ !("\\" | "\"") ~ any |  "\\t" | "\\n" | "\\r" | "\\\"" | "\\\'" | "\\\\" | ( "\\u{" ~ hexnum ~ "}" )}

// Names
name = { string* }

// Identifiers
id = @{ "$" ~ idchar+ }
idchar = @{
    '0' .. '9'
    | 'a' .. 'z'
    | 'A' .. 'Z'
    | "!" | "#" | "$" | "%" | "&" | "′" | "∗" | "+" | "−" | "." | "/"
    | ":" | "<" | "=" | ">" | "?" | "@" | "∖" | "^" | "_" | "`" | "|" | "~"
}




/// Types

// Value types
valtype = { "i32" | "i64" | "f32" | "f64" }

// Result types
resulttype = { result? }

// Function types
functype = { "(" ~ "func" ~ params ~ result* ~ ")" }
params = { param_abbr | param_strict* }
param_strict = { "(" ~ "param" ~ id? ~ valtype ~ ")" }
param_abbr = { "(" ~ "param" ~ valtype* ~ ")" }
result = { "(" ~ "result" ~ valtype ~ ")" }

// Limits
limits = { unsigned_num ~ unsigned_num? }

// Memory Types
memtype = { limits }

// Table Types
tabletype = { limits ~ elemtype }
elemtype = { "anyfunc" }

// Global Types
globaltype = { valtype | "(" ~ "mut" ~ valtype ~ ")" }




/// Instructions

instr = { plaininstr | blockinstr | foldedinstr }

// Labels
label = { id? }

// Control Instructions
blockinstr = {
      "block" ~ label ~ resulttype ~ instr* ~ "end" ~ id?
    | "loop" ~ label ~ resulttype ~ instr* ~ "end" ~ id?
    | "if" ~ label ~ resulttype ~ instr* ~ ( "else" ~ id? ~ instr* )? ~ "end" ~ id?
}

foldedinstr = { blockinstr_folded | plaininstr_folded }
plaininstr_folded = { "(" ~ plaininstr ~ foldedinstr* ~ ")" }
blockinstr_folded = {
      "(" ~ "block" ~ label ~ resulttype ~ instr* ~ id? ~ ")"
    | "(" ~ "loop" ~ label ~ resulttype ~ instr* ~ id? ~ ")"
    | "(" ~ "if" ~ label ~ resulttype ~ foldedinstr* ~ "(" ~ "then" ~ id? ~ instr*  ~ ")" ~ ( "(" ~ "else" ~ id? ~ instr*  ~ ")" )? ~ id? ~ ")"
}

plaininstr = {
      "unreachable"
    | "nop"
    | "br" ~ labelidx
    | "br_if" ~ labelidx
    | "br_table" ~ labelidx+
    | "return"
    | "call" ~ funcidx
    | "call_indirect" ~ typeuse

    // Parametric Instructions
    | "select"
    | "drop"

    // Variable Instructions
    | "get_local" ~ localidx
    | "set_local" ~ localidx
    | "tee_local" ~ localidx
    | "get_global" ~ globalidx
    | "set_global" ~ globalidx

    // Memory Instructions (I)
    | "i64.load32_u" ~ memarg
    | "i64.load32_s" ~ memarg
    | "i32.load16_u" ~ memarg
    | "i32.load16_s" ~ memarg
    | "i64.load16_u" ~ memarg
    | "i64.load16_s" ~ memarg
    | "i32.load8_u" ~ memarg
    | "i32.load8_s" ~ memarg
    | "i64.load8_u" ~ memarg
    | "i64.load8_s" ~ memarg
    | "i32.load" ~ memarg
    | "i64.load" ~ memarg
    | "f32.load" ~ memarg
    | "f64.load" ~ memarg
    | "i64.store32" ~ memarg
    | "i64.store16" ~ memarg
    | "i32.store16" ~ memarg
    | "i32.store8" ~ memarg
    | "i64.store8" ~ memarg
    | "i32.store" ~ memarg
    | "i64.store" ~ memarg
    | "f32.store" ~ memarg
    | "f64.store" ~ memarg
    | "current_memory"
    | "grow_memory"

    // Numeric Instructions
    | "i32.const" ~ uninterpreted_integer
    | "i64.const" ~ uninterpreted_integer
    | "f32.const" ~ floating_point_number
    | "f64.const" ~ floating_point_number

    | "i32.clz"
    | "i32.ctz"
    | "i32.popcnt"
    | "i32.add"
    | "i32.sub"
    | "i32.mul"
    | "i32.div_s"
    | "i32.div_u"
    | "i32.rem_s"
    | "i32.rem_u"
    | "i32.and"
    | "i32.or"
    | "i32.xor"
    | "i32.shl"
    | "i32.shr_s"
    | "i32.shr_u"
    | "i32.rotl"
    | "i32.rotr"

    | "i64.clz"
    | "i64.ctz"
    | "i64.popcnt"
    | "i64.add"
    | "i64.sub"
    | "i64.mul"
    | "i64.div_s"
    | "i64.div_u"
    | "i64.rem_s"
    | "i64.rem_u"
    | "i64.and"
    | "i64.or"
    | "i64.xor"
    | "i64.shl"
    | "i64.shr_s"
    | "i64.shr_u"
    | "i64.rotl"
    | "i64.rotr"

    | "f32.abs"
    | "f32.neg"
    | "f32.ceil"
    | "f32.floor"
    | "f32.trunc"
    | "f32.nearest"
    | "f32.sqrt"
    | "f32.add"
    | "f32.sub"
    | "f32.mul"
    | "f32.div"
    | "f32.min"
    | "f32.max"
    | "f32.copysign"


    | "f64.abs"
    | "f64.neg"
    | "f64.ceil"
    | "f64.floor"
    | "f64.trunc"
    | "f64.nearest"
    | "f64.sqrt"
    | "f64.add"
    | "f64.sub"
    | "f64.mul"
    | "f64.div"
    | "f64.min"
    | "f64.max"
    | "f64.copysign"

    | "i32.eqz"
    | "i32.eq"
    | "i32.ne"
    | "i32.lt_s"
    | "i32.lt_u"
    | "i32.gt_s"
    | "i32.gt_u"
    | "i32.le_s"
    | "i32.le_u"
    | "i32.ge_s"
    | "i32.ge_u"


    | "i64.eqz"
    | "i64.eq"
    | "i64.ne"
    | "i64.lt_s"
    | "i64.lt_u"
    | "i64.gt_s"
    | "i64.gt_u"
    | "i64.le_s"
    | "i64.le_u"
    | "i64.ge_s"
    | "i64.ge_u"

    | "f32.eq"
    | "f32.ne"
    | "f32.lt"
    | "f32.gt"
    | "f32.le"
    | "f32.ge"


    | "f64.eq"
    | "f64.ne"
    | "f64.lt"
    | "f64.gt"
    | "f64.le"
    | "f64.ge"

    | "i32.wrap/i64"
    | "i32.trunc_s/f32"
    | "i32.trunc_u/f32"
    | "i32.trunc_s/f64"
    | "i32.trunc_u/f64"
    | "i64.extend_s/i32"
    | "i64.extend_u/i32"
    | "i64.trunc_s/f32"
    | "i64.trunc_u/f32"
    | "i64.trunc_s/f64"
    | "i64.trunc_u/f64"
    | "f32.convert_s/i32"
    | "f32.convert_u/i32"
    | "f32.convert_s/i64"
    | "f32.convert_u/i64"
    | "f32.demote/f64"
    | "f64.convert_s/i32"
    | "f64.convert_u/i32"
    | "f64.convert_s/i64"
    | "f64.convert_u/i64"
    | "f64.promote/f32"
    | "i32.reinterpret/f32"
    | "i64.reinterpret/f64"
    | "f32.reinterpret/i32"
    | "f64.reinterpret/i64"
}

// Memory Instructions (II)
memarg = { offset ~ align }
offset = { ("offset=" ~ unsigned_num)? }
align = { ("align=" ~ unsigned_num)? }

// Folded Instructions (???)
// TODO: Implement this: https://webassembly.github.io/spec/core/text/instructions.html#folded-instructions

// Expressions
expr = { instr* }




/// Modules

// Indices
typeidx = { unsigned_num | id }
funcidx = { unsigned_num | id }
tableidx = { unsigned_num | id }
memidx = { unsigned_num | id }
globalidx = { unsigned_num | id }
localidx = { unsigned_num | id }
labelidx = { unsigned_num | id }

// Types
type_t = { "(" ~ "type" ~ id? ~ functype ~ ")" } // (type)

// Type Uses
typeuse = { ("(" ~ "type" ~ typeidx ~ ")")? ~ params ~ result* }

// Imports
import = { "(" ~ "import" ~ name ~ name ~ importdesc ~ ")" }
importdesc = {
      "(" ~ "func" ~ id? ~ typeuse ~ ")"
    | "(" ~ "table" ~ id? ~ tabletype ~ ")"
    | "(" ~ "memory" ~ id? ~ memtype ~ ")"
    | "(" ~ "global" ~ id? ~ globaltype ~ ")"
}

// Functions
func = { "(" ~ "func" ~ id? ~ typeuse ~ local* ~ instr* ~ ")" }
local = { "(" ~ "local" ~ id? ~ valtype ~ ")" }
// TODO: Implement: https://webassembly.github.io/spec/core/text/modules.html#text-func-abbrev

// Tables
table = { "(" ~ "table" ~ id? ~ tabletype ~ ")" }
// TODO: Implement: https://webassembly.github.io/spec/core/text/modules.html#text-table-abbrev

// Memories
mem = { "(" ~ "memory" ~ id? ~ memtype ~ ")" }
// TODO: Implement: https://webassembly.github.io/spec/core/text/modules.html#text-mem-abbrev

// Globals
global = { "(" ~ "global" ~ id? ~ globaltype ~ ")" }
// TODO: Implement: https://webassembly.github.io/spec/core/text/modules.html#text-global-abbrev

// Exports
export = { "(" ~ "export" ~ name ~ exportdesc ~ ")" }
exportdesc = {
      "(" ~ "func" ~ funcidx ~ ")"
    | "(" ~ "table" ~ tableidx ~ ")"
    | "(" ~ "memory" ~ memidx ~ ")"
    | "(" ~ "global" ~ globalidx ~ ")"
}

// Start Function
start = { "(" ~ "start" ~ funcidx ~ ")" }

// Element Segments
elem = { "(" ~ "elem" ~ tableidx? ~ "(" ~ "offset" ~ expr ~ ")" ~ funcidx* ~ ")" }

// Data Segments
data = { "(" ~ "data" ~ memidx? ~ "(" ~ "offset" ~ expr ~ ")" ~ datastring* ~ ")" }
datastring = { string*}

// Modules
module = { "(" ~ "module" ~ id? ~ modulefield* ~ ")" }
modulefield = {
      type_t
    | import
    | func
    | table
    | mem
    | global
    | export
    | start
    | elem
    | data
}

/// Misc
newline = _{ "\n" | "\r\n" }
whitespace = _{ " " | "\t" | newline }
file = { soi ~ module* ~ eoi }
